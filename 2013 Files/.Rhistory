x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
N<-10
i<-1
x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
bitmap(sprintf("Rplot%02d.png",i))
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=T,labels=NA)
?pie
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of Statements made \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n (Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
dev.copy2pdf(file='PieChart.pdf')
getwd()
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=2)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made \n by professors in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n  \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n(organized by professor)',cex=1.5)
dev.copy2pdf(file='PieChart.pdf')
dev.copy2pdf(file='PieChart.pdf')
set.seed(8219)
getwd()
setwd('/Users/aaronfisher/Documents/JH/Causal Liz Stewart/HW1')
x<-read.csv('sesame.csv')
attach(x)
con<- encour==0
boxplot(preform[con],postform[con])
boxplot(prebody[con],postbody[con])
boxplot(prelet[con],postlet[con])
boxplot(prelet[con],postlet[con])
boxplot(prelet[con],postlet[con])
diffcon<-postlet[con]-prelet[con]
diffcon
sd(diffcon)
difftrt<-postlet[trt]-prelet[trt]
difftrt<-postlet[!con]-prelet[!con]
t.test(diffcon,difftrt)
diffcon-difftrt+c(1,-1)*sd(diffcon-difftrt)
diffcon-difftrt+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
var(diffcon)+var(difftrt)
mean(diffcon-difftrt)+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
rep(mean(diffcon-difftrt),2)+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
t.test(diffcon,difftrt)
t.test(diffcon,difftrt)
wilcox.test(diffcon,difftrt)
mean(con)
?wilcox.test
t.test(diffcon,difftrt)
wilcox.test(diffcon,difftrt)
t.test(diffcon,difftrt)
wilcox.test(diffcon,difftrt)
wilcox.test(diffcon,difftrt,conf.inf=TRUE)
wilcox.test(diffcon,difftrt,conf.int=TRUE)
t.test(diffcon,difftrt)
wilcox.test(diffcon,difftrt,conf.int=TRUE)
t.test(dta$postlet[dta$encour==1], dta$postlet[dta$encour==0])
t.test(x$postlet[dta$encour==1], dta$postlet[dta$encour==0])
t.test(x$postlet[x$encour==1], x$postlet[x$encour==0])
wilcox.test(x$postlet[x$encour==1], x$postlet[x$encour==0])
wilcox.test(x$postlet[x$encour==1], x$postlet[x$encour==0],conf.int=T)
t.test(x$postlet[x$encour==1], x$postlet[x$encour==0])
wilcox.test(x$postlet[x$encour==1], x$postlet[x$encour==0],conf.int=T)
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)+var(difftrt))
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)/sum(con)+var(difftrt)/sum(!con))
wilcox.test(diffcon,difftrt,conf.int=TRUE)
t.test(diffcon,difftrt)
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)/sum(con)+var(difftrt)/sum(!con))
wilcox.test(diffcon,difftrt,conf.int=TRUE)$conf.int
t.test(diffcon,difftrt)$conf
t.test(diffcon,difftrt)$conf
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)/sum(con)+var(difftrt)/sum(!con)) #work check
wilcox.test(diffcon,difftrt,conf.int=TRUE)$conf.int
ls()
attach(x)
ls()
names(x)
m1<-lm(postlet~encour)
diffcon<-postlet[!encour]-prelet[!encour]
difftrt<-postlet[encour]-prelet[encour]
t.test(diffcon,difftrt)$conf
mean(diffcon)-mean(difftrt)+c(2,-2)*sqrt(var(diffcon)/sum(con)+var(difftrt)/sum(!con)) #work check
wilcox.test(diffcon,difftrt,conf.int=TRUE)$conf.int
m1<-lm(postlet~encour)
m2<-lm(postlet~encour+prelet)
m3<-lm(I(postlet-prelet)~encour)
m2$coef
rbind(m1$coef,m2$coef,m3$coef)
rbind(cbind(m1$coef,'NA'),m2$coef,m3$coef)
rbind(cbind(m1$coef,'NA'),m2$coef,(m3$coef,'NA'))
m1$coef;m2$coef;m3$coef
m1$coef
summary(m1)$coef;m2$coef;m3$coef
summary(m1)$coef;summary(m2)$coef;summary(m3)$coef
m3.alt<-lm(postlet~encour,offset=prelet)
summary(m1)$coef;summary(m2)$coef;summary(m3)$coef;summary(m3.alt)$coef
m1<-lm(postlet~encour) #m1 = model 1
m2<-lm(postlet~encour+prelet)
m3<-lm(I(postlet-prelet)~encour)
m3.alt<-lm(postlet~encour,offset=prelet) #showing equivalence with model 2
summary(m1)$coef;summary(m2)$coef;summary(m3)$coef;summary(m3.alt)$coef
setwd("/Users/aaronfisher/Documents/JH/ADAMachine/2013 Files/")
#MODEL
#Y_i=β_0 + ∫X_i(t)β(t) +e_i
shapeType<-'c'; set.seed(34871)
#shapeType<-'snail'; set.seed(40871)
# # generate "C" shape function
#NOTE THIS IS NOT THE USUAL NOTATION FOR I????? CHANGE????
I <- 100 #I is the length of the curve
N <- 200 #N is the number of curves
library(RColorBrewer)
darkCol<-brewer.pal(10,'Paired')
lightCol<-brewer.pal(10,'Set3')
######
#Generate $k$ signals to mix into the simulated thickness
k<-7 #number of signals to mix for X
signals<-array(dim=c(k,I))
signals[1,]<-sin((1:I)/I*2*pi)
signals[2,]<-seq(-1,3,length=I)
library(splines)
bsSig<-t(bs(1:I,df=7,degree=3,intercept=TRUE)) # "b spline signals"
matplot(t(bsSig),type='l')
signals[3,]<-bsSig[1,]+bsSig[3,]
signals[4,]<-bsSig[2,]-bsSig[6,]
signals[5,]<-bsSig[3,]+bsSig[6,]+bsSig[7,]
signals[6,]<-bsSig[4,]
signals[7,]<-bsSig[7,]
for(i in 1:k) signals[i,]<-signals[i,]/max(abs(signals[i,]))
signals<-signals-rowMeans(signals)
matplot(t(signals),type='l',lty=1,col=darkCol)
##############
############
#Generate true B(t) & functional model parameters
bsBeta<-t(bs(1:I,df=15,degree=3,intercept=TRUE))/2 # "b spline signals"
betat<-matrix(colSums(bsBeta[c(1:3,12:15),]))
dim(betat)<-c(I,1)
plot(betat)
beta0<-3
sd_e<-1
###########
#Make X_i(t)'s (thicknesses)
#defining rwalk, a random walk generator.
#to be used to add SMOOTH random noise to the covariate function, beyond our defined principle components
rwalk<-function(I,amplitude=1){
x<-rep(0,I)
x[1]<-rnorm(1)
for(i in 2:I){
x[i]<-rnorm(1,x[i-1],1)
}
outpre1<-lowess(x,f=1/8)$y
outpre2<-(outpre1-mean(outpre1))
out<-outpre2*amplitude/max(abs(outpre2))
return(out)
}
plot(rwalk(I,amplitude=.2)) #test
#write thicknesses, generate outcomes (y)
y<-rep(NA,N)
e_y<-rnorm(N,0,sd=sd_e) #noise in the model for y, see above for sd_e
thicknesses<-matrix(nrow=N,ncol=I)
for(i in 1:N){
#Get thicknesses:
#noise<-rnorm(I) ???
int.i<-runif(1,.9,1.1) #some variation in the overall height.
sigWeights.i<-runif(k,-.2,.2)
noise.i<-rwalk(I,amplitude=.15)
thick.i<-int.i+matrix(sigWeights.i,nrow=1)%*%signals + noise.i
thicknesses[i,]<-thick.i
#get outcome
y[i]<-beta0+thicknesses[i,]%*%betat+e_y[i]
}
matplot(t(thicknesses[1:40,]),lty=1,type='l',lwd=2.5,col=lightCol)
hist(y)
#sanity check
plot(rowMeans(thicknesses),y)
plot(rowMeans(thicknesses[,betat>mean(betat)]),y) #rough way to check
#####generate 2-d shapes######
if(shapeType=='c') {
shapeTheta<-seq(pi/4,7*pi/4,length=I)
rSpine<-rep(5,I)
}
if(shapeType=='snail') {
shapeTheta<-seq(0,2*pi,length=I)
rSpine<-3.5+4*(1:I/I)
}
#Get X & Y Data
#???????????
jitterIt<-TRUE #Add jitter/measurement error
#reduceIt<-TRUE
maxObsPerRow<-20
maxThick<-max(thicknesses) #could change this a bit later
dat.x<-matrix(nrow=N,ncol=I*maxObsPerRow)
dat.y<-matrix(nrow=N,ncol=I*maxObsPerRow)
for(i in 1:N){ #going across subjects
i.ticker<-0
for(t in 1:I){ #going across angles
obsPerRow.it<-floor(thicknesses[i,t]/maxThick * maxObsPerRow)
obsR.it<-seq(rSpine[t]-thicknesses[i,t],rSpine[t]+thicknesses[i,t],length=obsPerRow.it)
if(jitterIt) obsR.it<-jitter(obsR.it,factor=.4)
for(o in 1:obsPerRow.it){ #going across observations per angle
i.ticker<-i.ticker+1
#obsThickness.ito<-runif(1,rSpine[t]-thicknesses[i,t],rSpine[t]+thicknesses[i,t])
#no longer doing runif????
dat.x[i,i.ticker]<-cos(shapeTheta[t])*obsR.it[o]
dat.y[i,i.ticker]<-sin(shapeTheta[t])*obsR.it[o]
}
}
#if(reduceIt){
#  coords.i<-cbind(dat.x[i,!is.na(dat.x[i,])],dat.y[i,!is.na(dat.y[i,])])
# distances.i<-as.matrix(dist(coords.i))
#}
}
plot(dat.x[1,],dat.y[1,],pch=18,cex=.7,col=darkCol[2])
image(datx)
image(dat.x)
dim(dat.x)
points(dat.x[2,],dat.y[2,],pch=18,cex=.7,col=darkCol[4])
image(dat.y)
mean(is.na(dat.x))
mean(is.na(dat.y))
all(!is.na(dat.y)==!is.na(dat.x))
all(is.na(dat.y)==is.na(dat.x))
.6*2000
mean(is.na(dat.x))/2000
mean(is.na(dat.x))*.2000
mean(!is.na(dat.x))*2000
