x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
N<-10
i<-1
x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
bitmap(sprintf("Rplot%02d.png",i))
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=T,labels=NA)
?pie
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of Statements made \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n (Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
dev.copy2pdf(file='PieChart.pdf')
getwd()
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=2)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made \n by professors in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n  \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n(organized by professor)',cex=1.5)
dev.copy2pdf(file='PieChart.pdf')
dev.copy2pdf(file='PieChart.pdf')
set.seed(8219)
getwd()
setwd('/Users/aaronfisher/Documents/JH/ADAMachine')
library(RColorBrewer)
darkCol<-brewer.pal(10,'Set3')
seqCol<-brewer.pal(8,'YlGnBu')
# generate "C" shape function
I <- 300
N <- 500
set.seed(999)
y.out <- rpois(I, 3)
fix <- runif(I,.1,.3)
datx <- NULL
daty <- NULL
for (i in 1:I){
theta <- runif(N, pi/3, 7*pi/4)
thick <- rep(N, 0)
thick[theta<(3*pi/4)] <- 4*log(y.out[i]+1)/10
thick[(theta<(5*pi/4))&(theta>(3*pi/4))] <- fix[i]+rnorm(sum((theta<(5*pi/4))&(theta>3*pi/4)),0,0.01)
thick[theta>(5*pi/4)] <- 2*log(y.out[i]+1)/10
r <- 1+runif(N, -thick/2, thick/2)
x <- r*cos(theta)
y <- r*sin(theta)
plot(x,y)
datx <- cbind(datx, x)
daty <- cbind(daty, y)
}
#path1 <- 'C:/Users/Chen/Documents/Coursework/Advanced Statistcal Methods/756 final'
load('prinCurves.RData')
rivs[i,])
#Plot angles?
angles<-array(dim=c(I,99))
for(i in 1:I){
for(j in 1:99){
pc.i<-prinCurves[[i]]
v.1ij<-c(pc.i[j,2]-pc.i[j+1,2],pc.i[j,1]-pc.i[j+1,1]) #vectorij
v.2ij<-c(pc.i[j+2,2]-pc.i[j+1,2],pc.i[j+2,1]-pc.i[j+1,1])
angles[i,j]<-acos(v.1ij%*%v.2ij/sqrt(sum(v.1ij^2)*sum(v.2ij^2)) )
}
}
matplot(t(angles),type='l')
minAngles<-apply(angles,1,min)
#sdAngles<-apply(angles,2,sd) #Better to base it off sd of all the angles I think?
meanAngles<-apply(angles,2,mean)
plot(sdAngles,type='l')
plot(meanAngles,type='l')
#build matrices for centering
#sdAnglesMat<-matrix(sdAngles,nrow=I,ncol=99,byrow=T)
meanAnglesMat<-matrix(meanAngles,nrow=I,ncol=99,byrow=T)
anglesCentered<-(angles-meanAnglesMat)/sd(c(angles))
matplot(t(anglesCentered[1:20,]),type='l')
highSdCurves<-which(  apply(anglesCentered,1,function(x){max(abs(x))>2})  )
hist(minAngles)
par(bg='ghostwhite')
#highlight bad curves
plot(prinCurves[[highSdCurves[1]]],type='l',lwd=2)
for(c in 1:length(highSdCurves)){
lines(prinCurves[[highSdCurves[c]]],col=darkCol[c],lwd=2)
}
#ZOOM IN
goodCurves<-setdiff(1:I,highSdCurves)
plot(prinCurves[[goodCurves[1]]],type='l')
for(c in 1:length(goodCurves)){
lines(prinCurves[[goodCurves[c]]],col=darkCol[c])
}
goodCurves
length(goodCurves)
length(badCurves)
length(highSdCurves)
plot(prinCurves[[highSdCurves[1]]],type='l',lwd=2)
for(c in 1:length(highSdCurves)){
lines(prinCurves[[highSdCurves[c]]],col=darkCol[c],lwd=2)
}
#ZOOM IN
plot(prinCurves[[highSdCurves[1]]],type='l',lwd=3,xlim=c(.3,.8),ylim=c(.6,1.4))
for(c in 1:length(highSdCurves)){
lines(prinCurves[[highSdCurves[c]]],col=darkCol[c],lwd=3)
}
plot(prinCurves[[highSdCurves[1]]][2:100,],pch=19,col=seqCol[1+floor(abs(anglesCentered)[1,]/abs(max(anglesCentered[1,]))*8)] ,type='o',lwd=5)
for(c in 1:length(highSdCurves)){
points(prinCurves[[highSdCurves[c]]],pch=19,col=seqCol[1+floor(abs(anglesCentered)[c,]/abs(max(anglesCentered[c,]))*8)], type='o',lwd=5,)
}
plot(prinCurves[[highSdCurves[1]]][2:100,],pch=19,col=seqCol[1+floor(abs(anglesCentered)[1,]/abs(max(anglesCentered[1,]))*8)] ,type='o',lwd=5)
#Plot angles?
angles<-array(dim=c(I,97))
for(i in 1:I){
for(j in 1:97){
pc.i<-prinCurves[[i]]
v.1ij<-c(pc.i[j,2]-pc.i[j+2,2],pc.i[j,1]-pc.i[j+2,1]) #vectorij
v.2ij<-c(pc.i[j+4,2]-pc.i[j+2,2],pc.i[j+4,1]-pc.i[j+2,1])
angles[i,j]<-acos(v.1ij%*%v.2ij/sqrt(sum(v.1ij^2)*sum(v.2ij^2)) )
}
}
matplot(t(angles),type='l')
minAngles<-apply(angles,1,min)
#sdAngles<-apply(angles,2,sd) #Better to base it off sd of all the angles I think?
meanAngles<-apply(angles,2,mean)
plot(sdAngles,type='l')
plot(meanAngles,type='l')
meanAnglesMat<-matrix(meanAngles,nrow=I,ncol=97,byrow=T)
anglesCentered<-(angles-meanAnglesMat)/sd(c(angles))
matplot(t(anglesCentered[1:20,]),type='l')
highSdCurves<-which(  apply(anglesCentered,1,function(x){max(abs(x))>2})  )
hist(minAngles)
par(bg='ghostwhite')
#highlight bad curves
plot(prinCurves[[highSdCurves[1]]],type='l',lwd=2)
for(c in 1:length(highSdCurves)){
lines(prinCurves[[highSdCurves[c]]],col=darkCol[c],lwd=2)
}
length(highSdCurves)
plot(prinCurves[[highSdCurves[1]]][2:100,],pch=19,col=seqCol[1+floor(abs(anglesCentered)[1,]/abs(max(anglesCentered[1,]))*8)] ,type='o',lwd=5)
for(c in 1:length(highSdCurves)){
points(prinCurves[[highSdCurves[c]]],pch=19,col=seqCol[1+floor(abs(anglesCentered)[c,]/abs(max(anglesCentered[c,]))*8)], type='o',lwd=5,)
}
plot(prinCurves[[highSdCurves[1]]][2:100,],pch=19,col=seqCol[1+floor(abs(anglesCentered)[1,]/abs(max(anglesCentered[1,]))*8)] ,type='o',lwd=5)
for(c in 1:length(highSdCurves)){
points(prinCurves[[highSdCurves[c]]],pch=19,col=seqCol[1+floor(abs(anglesCentered)[c,]/abs(max(anglesCentered[c,]))*8)],lwd=5,)
}
