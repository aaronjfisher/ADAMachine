x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
N<-10
i<-1
x=cos(2*pi/N*i);y=x+1;z=(y-2)*22.5
bitmap(sprintf("Rplot%02d.png",i))
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=135-z,border=FALSE,labels=NA)
pie(c(y,8-y),col=c("white","yellow"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=FALSE,labels=NA)
pie(1,col=c("red"),init.angle=0,border=T,labels=NA)
?pie
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of Statements made \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n (Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
dev.copy2pdf(file='PieChart.pdf')
getwd()
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)')
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=2)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts',sub='(Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (Organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=2,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts (organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1.4,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made \n by professors in support of pie charts \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n  \n(organized by professor)',cex=1.5)
pie(1,col=c("red"),init.angle=0,radius=1,border=F,labels='Rafa',main='Pie Chart of statements made by professors \n  in support of pie charts \n(organized by professor)',cex=1.5)
dev.copy2pdf(file='PieChart.pdf')
dev.copy2pdf(file='PieChart.pdf')
path1 <- '/Users/aaronfisher/Documents/JH/Biostatistics V & VI/Bst VI Final Project with Chen'
setwd(path1)
load('thickness.Rdata')
load('simul_1.RData')
# source('principalcurve.R')
# source('lmstep.R')
# source('pjstep.R')
I <- 300
N <- 500
set.seed(999)
y.out <- rpois(I, 3)
if(diff(dim(thickness))>0) thickness <- t(thickness)
#NOW ROWS ARE SUBJ
#COLS ARE COORDS
#Look at five different subjects
dim(thickness)
plot(thickness[1,])
plot(thickness[2,])
plot(thickness[3,])
plot(thickness[4,])
plot(thickness[5,])
########################################################################
########################################################################
########################################################################
#GLMS
#TRY BIN METHOD FOR DIFFERENT BIN SIZES
#Show below the instability of the coef's at higher bin size
p<-dim(thickness)[2]
binmodel<-function(nbins){
binMat<-matrix(nrow=dim(thickness)[1],ncol=nbins)
thickbreaks<-seq.int(1,p,length=nbins+1)
for(i in 1:300){
for(j in 1:nbins){
binMat[i,j]<- mean(thickness[i,thickbreaks[j]:thickbreaks[j+1]])
}
}
mpois<-glm(y.out~binMat,family='poisson') #poisson Model
if(nbins>1) plot(mpois$coef[-1],type='l',main=paste('β fits,  nbins = ',nbins),xlab='bin',ylab='beta') #not the intercept
if(nbins<10) print(mpois$coef)
#SEE HOW CLOSELY IT'S FITTING
#par(mfrow=c(2,1))
if(nbins>1){
plot(thickness[1,],type='l',main=paste('X[1,] fits,  nbins = ',nbins))
points(thickbreaks[1:nbins]+p/(2*nbins),binMat[1,],pch=19)
}
#plot(thickness[2,])
#points(thickbreaks[1:nbins]+p/(2*nbins),binMat[2,],pch=19)
return(mpois)
}
par(mfrow=c(4,2))
for(numberbins in c(1,5,10,20,40)) {binmodel(numberbins)}
mBIN<-binmodel(5)
betaBIN<-mBIN$coef[-1]
dev.off()
plot(betaBIN)
########################################################################
########################################################################
########################################################################
#PCA
# plot(colMeans(thickness))
#
# colMeanMat<-matrix(colMeans(thickness),byrow=T,nrow=dim(thickness)[1],ncol=dim(thickness)[2])
#
# thickZero<-thickness-colMeanMat
thickZero <- scale (thickness, center=T, scale=F)
matplot(t(matrix(rep(1:101, each=300), 300, 101)), t(thickZero), type='l')
# Was fitting PCA's by hand here, but gave up
# eigenList<-eigen(t(thickZero)%*%thickZero)
# svd(thickZero)
# svdt<-svd(t(thickZero)%*%thickZero)
# svdt<-svd(thickZero)
# svdt$d^2/cumsum(svdt$d^2)
# eigenList$values
# eigenList$values^2/cumsum(eigenList$values^2)
#Just use Pre-sets
pcx<-princomp(x=thickZero)
summary(pcx)
names(pcx)
ups<-pcx$load #Matrix of eigen vectors (by column) denoted
image(ups)
image(t(ups)%*%ups)
t(ups[,1])%*%ups[,1] #all ψ_k'ψ_k terms will cancel to 1
#First 5 PCs
plot(ups[,1])
plot(ups[,2])
plot(ups[,3])
plot(ups[,4])
plot(ups[,5])
###################################
####### PICKING K_x
#How much did each subj weight on these 5 pcs?
K_x<-35 #How many PC's to use? Once we hit 35 it looks super close
xScoreKx<-pcx$score[,1:K_x]
plot(1:101,ylim=range(thickZero))
for(l in 1:101){
lines(thickZero[l,])
}
plot(1:101,ylim=range(thickness))
for(l in 1:101){
lines(thickness[l,])
}
#Est people based on PCs
estCurve<-array(dim=dim(thickZero))
for(i in 1:300){
estCurvei<-rep(0,p)
for(k in 1:K_x){
estCurvei<-estCurvei+xScoreKx[i,k]*ups[,k]
}
estCurve[i,]<-estCurvei
}
#Check how well the fit is on 4 random Xi's
par(mfrow=c(2,2))
for(i in sample(1:I,4)){
plot(thickZero[i,],main=paste('subject ',i),pch=4)
lines(estCurve[i,])
}
######## END OF PICKING K_x
###################################
mpca<-glm(y.out~xScoreKx,family='poisson') #model PCA
summary(mpca)
#recover beta(t)
betaPCA<-rep(0,p)
for(kb in 1:K_x) betaPCA<-betaPCA+mpca$coef[kb+1]*ups[,kb] #don't include intercept
plot(betaPCA)
####################################################
####################################################
####################################################
# Adding B Splines to Beta representation
library(splines)
#Get splines
K_b<-35 # # of slides
bsplines<-bs(1:p,df=K_b,degree=3,intercept=T) #degree 3 = cubic, could also do quadratic splines and it would look almost identical.
dev.off()
#Plot the different Bases
par(mfrow=c(1,2))
matplot(ups[,1:10],type='l',main='Principle Components for X',lty=1,xaxt='n',ylab='')
matplot(bsplines,type='l',ylim=range(bsplines), main='b-spline basis for β',lty=1,col='black',ylab='',xaxt='n')
dev.copy2pdf(file='Figure_Basis.pdf')
t(bsplines)%*%bsplines
image(t(bsplines)%*%bsplines) #OK, not exactly orthogonal?? But still a basis!
#Get J matrix (integrated thing)
J<-matrix(nrow=K_x,ncol=K_b)
for(kx in 1:K_x){
for (kb in 1:K_b){
J[kx,kb]<-sum(ups[,kx] * bsplines[,kb])/p #*1/p to integrate from 0 to 1
}
}
C<-xScoreKx
##########################
dim(C)
load( file='mcmc_C_35.RData')
H<-MCMC.result$n.keep
p<-101
plotchains<-T
# Check the chains for beta
#just functions for plotting here.
if(plotchains){
plotInd<-floor(seq(1,H,length=min(10000,H)))
p<-101 #length of the curve t=1,...p
name <- sapply(1:35, function(x){paste('beta',as.character(x))})
layout(matrix(1:4,2,2))
for (i in 1:35){
plot(MCMC.result$sims.list$beta[,i][plotInd], type='l', ylab='', main=name[i])
}
# beta mixed very well !
# Check the chains for B0 and taubeta
plot(MCMC.result$sims.list$B0[plotInd], type='l', ylab='', main='B0')
plot(MCMC.result$sims.list$taubeta[plotInd], type='l', ylab='', main=expression(tau[beta]))
plot(1/MCMC.result$sims.list$taubeta[plotInd], type='l', ylab='', main=expression(1/tau[beta]))
}
# B0 mixed well while taubeta is not quite good
plot(MCMC.result$sims.list$beta[,i][plotInd], type='l', ylab='', main=name[i])
# Reconstruct all the curves
beta.hist <- MCMC.result$sims.list$beta
dim(beta.hist)
dim(bsplines)
height.hist <- beta.hist%*%t(bsplines)
sigma <- var(height.hist)
sd_t<-sqrt(diag(sigma))
# check the correlation coefficient of all the curve grid points
image(cov2cor(sigma))
par(mfrow=c(1,2))
matplot(t(height.hist[1:500,]),type='l',main='raw') #plots the columns
matplot(t(height.hist[1:500,]),type='l',main='raw') #plots the columns
BtEst<-colMeans(height.hist)
Bt.means<-array(rep(BtEst,each=H),dim=dim(height.hist))
Bt.hist0<-height.hist-Bt.means
matplot(t(Bt.hist0[1:500,]),type='l',main='zeroed')
Bt.sds<-array(rep(sd_t,each=H),dim=dim(height.hist))
d<- abs(Bt.hist0/Bt.sds)
par(mfrow=c(1,1))
bigd<-apply(d,1,max)
band95dval<-quantile(bigd,.95)
band95width_t<-band95dval*sd_t
plot(band95width_t)
d<- abs(Bt.hist0/Bt.sds)
par(mfrow=c(1,1))
bigd<-apply(d,1,max)
band95dval<-quantile(bigd,.95)
band95width_t<-band95dval*sd_t
plot(band95width_t)
#Figure for paper
par(mfrow=c(2,1),mar=c(5,5,2,1),mgp=c(3,2,1))
matplot(t(height.hist[1:500,]),lwd=.5,type='l',main=expression(paste('Posterior draws β'[d],'(t)')),xlab='t',ylab=expression(paste(''\beta[d],'(t)')))
lines(BtEst,lwd=2,col='black')
matplot(t(d[1:500,]),type='l',lwd=.5,main='Standard Devations from Mean(β(t))',xlab='t',ylab=expression(paste(' | β'[d],'(t) - mean(β(t)) | / σ(t)')))
abline(h=band95dval,lwd=2)
matplot(t(Bt.hist0[1:500,]),type='l',main='zeroed')
lines(band95width_t,lwd=2)
lines(-band95width_t,lwd=2)
##########################
######## COOL PLOT!!!
dev.off()
matplot(t(height.hist[1:500,]),lwd=.2 ,type='l',main='Target B draws, with bands & pointwise CIs',ylim=c(-20,40),xlab='t',ylab='B(t)',) #plots the
lines(BtEst,lwd=2,col='black')
lines(BtEst+band95width_t,lty=2,col='red',lwd=2,)
lines(BtEst-band95width_t,lty=2,col='red',lwd=2)
abline(h=0)
d.pt.L<- apply(height.hist,2,function(x) quantile(x,probs=.025)) #pointwise lower
d.pt.U<- apply(height.hist,2,function(x) quantile(x,probs=.975))
d.pt.L.bon<- apply(height.hist,2,function(x) quantile(x,probs=.025/101)) #pointwise lower
d.pt.U.bon<- apply(height.hist,2,function(x) quantile(x,probs=1-(.025/101)))
#lines(BtEst+qnorm(.025/100)*sd_t,lwd=2)
#lines(BtEst-2*sd_t,lwd=2)
lines(d.pt.L,col='black',lwd=2,lty=2)
lines(d.pt.U,col='black',lwd=2,lty=2)
lines(d.pt.L.bon,col='blue',lwd=2,lty=2)
lines(d.pt.U.bon,col='blue',lwd=2,lty=2)
legend('topleft',c('Estimate','Pointwise CI','Band'),lty=c(1,2,2),col=c('black','black','red'),lwd=2)
#########################
matplot(t(height.hist[1:500,]),lwd=.2 ,type='l',main='Target B draws, with bands & pointwise CIs',ylim=c(-20,40),xlab='t',ylab='B(t)',) #plots the
lines(BtEst,lwd=2,col='black')
lines(BtEst+band95width_t,lty=2,col='red',lwd=2,)
lines(BtEst-band95width_t,lty=2,col='red',lwd=2)
abline(h=0)
d.pt.L<- apply(height.hist,2,function(x) quantile(x,probs=.025)) #pointwise lower
d.pt.U<- apply(height.hist,2,function(x) quantile(x,probs=.975))
d.pt.L.bon<- apply(height.hist,2,function(x) quantile(x,probs=.025/101)) #pointwise lower
d.pt.U.bon<- apply(height.hist,2,function(x) quantile(x,probs=1-(.025/101)))
#lines(BtEst+qnorm(.025/100)*sd_t,lwd=2)
#lines(BtEst-2*sd_t,lwd=2)
lines(d.pt.L,col='black',lwd=2,lty=2)
lines(d.pt.U,col='black',lwd=2,lty=2)
lines(d.pt.L.bon,col='blue',lwd=2,lty=2)
lines(d.pt.U.bon,col='blue',lwd=2,lty=2)
image(cov2cor(sigma))
pdf(covMat_C_35.pdf)
image(cov2cor(sigma))
dev.off()
pdf(file='covMat_C_35.pdf')
image(cov2cor(sigma))
dev.off()
